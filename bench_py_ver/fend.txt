char** read_PAPIEvents_from_environment_variables(int* event_count) {
    char *pathvar = getenv(PAPIEVENT_ENVIRONMENT_VARIABLE);
    char** res;
    int count = 0, find = 0; int i = 0;
    for (i = 0; i < strlen(pathvar); i++) {
        if (pathvar[i] != ':' && find == 0) {
            count++;
            find = 1;
        } else if (pathvar[i] == ':' && find == 1) {
            find = 0;
        }
    }
    res = (char**) malloc((count)*sizeof(char*));
    int start=0;
    int res_count = 0;
    for (i = 0; i < strlen(pathvar); i++) {
        if (pathvar[i] != ':' && find == 0) {
            find = 1;
            start = i;
        } else if (pathvar[i] == ':' && find == 1) {
            find = 0;
            res[res_count] = (char*)malloc((i-start+1));
            memset(res[res_count], 0, (i-start+1));
            memcpy(res[res_count], pathvar+start, i-start);
            res_count++;
        }
    }
    if (find==1) {
        res[res_count] = (char*)malloc((i-start+1));
        memset(res[res_count], 0, (i-start+1));
        memcpy(res[res_count], pathvar+start, strlen(pathvar)-start);
        res_count++;
    }
    *event_count = count;
    return (res);
}

int main() {
    char **papi_events;
    char event_name1[] = "PAPI_TOT_CYC";
    char event_name2[] = "PAPI_TOT_INS";
    char event_name3[] = "PAPI_LST_INS";
    char event_name4[] = "PAPI_L1_DCM";
/*    papi_retval = PAPI_library_init(PAPI_VER_CURRENT);
    if (papi_retval != PAPI_VER_CURRENT) {
        printf("PAPI_library_init Failed! retval = %d\n", papi_retval);
    }
    papi_retval = PAPI_create_eventset(&EventSet);
    if (papi_retval != PAPI_OK) {
        printf("PAPI_create_eventset Failed!, retval is %d\n", papi_retval);
    }
    papi_events = read_PAPIEvents_from_environment_variables(&num_events);
    event_count = num_events;
    for (i = 0; i<num_events; i++) {
        papi_retval = PAPI_add_named_event(EventSet, papi_events[i]);
        if (papi_retval != PAPI_OK) {
            printf("PAPI_add_named_event Failed! Event is %s, retval is %d\n", papi_events[i], papi_retval);
        }
    }*/
papi_retval = PAPI_library_init(PAPI_VER_CURRENT);
    if (papi_retval != PAPI_VER_CURRENT) {
        printf("PAPI_library_init Failed! retval = %d\n", papi_retval);
    }
    papi_retval = PAPI_multiplex_init();
    if (papi_retval != PAPI_OK)
        printf("PAPI_multiplex_init Failed! retval = %d\n", papi_retval);
    papi_retval = PAPI_create_eventset(&EventSet);
    if (papi_retval != PAPI_OK) {
        printf("PAPI_create_eventset Failed!, retval is %d\n", papi_retval);
    }
    papi_retval = PAPI_assign_eventset_component(EventSet, 0);
    if (papi_retval != PAPI_OK)
        printf("PAPI_assign_eventset_component Failed!, retval is %d\n",
               papi_retval);
    papi_retval = PAPI_set_multiplex(EventSet);
    if (papi_retval != PAPI_OK)
        printf("PAPI_set_multiplex Failed! retval = %d\n", papi_retval);
    papi_events = read_PAPIEvents_from_environment_variables(&num_events);
    event_count = num_events;
    for (i = 0; i<num_events; i++) {
        papi_retval = PAPI_add_named_event(EventSet, papi_events[i]);
        if (papi_retval != PAPI_OK) {
            printf("PAPI_add_named_event Failed! Event is %s, retval is %d\n", papi_events[i], papi_retval);
        }
    }


    values = allocate_values_space(1, num_events);
